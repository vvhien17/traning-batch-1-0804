name: CI Back End

permissions:
  checks: write

on:
  push:
    branches:
      - main
      - release
      - "release/**" # Add pattern for `release/` branches
  pull_request:
    branches:
      - main
      - release
      - "release/**" # Add pattern for `release/` branches

jobs:
  build:
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{ steps.upload-artifact.outputs.artifact-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Delete package-lock.json
        working-directory: tms-backend
        run: rm -f package-lock.json

      - name: Install backend dependencies
        working-directory: tms-backend
        run: pnpm install

      - name: Run backend build
        working-directory: tms-backend
        run: pnpm run build

      - name: Upload build artifact
        id: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: tms-backend/dist

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Delete package-lock.json
        working-directory: tms-backend
        run: rm -f package-lock.json

      - name: Install backend dependencies
        working-directory: tms-backend
        run: pnpm install

      - name: Ensure coverage directory exists
        working-directory: tms-backend
        run: mkdir -p ./coverage

      - name: Run backend tests
        working-directory: tms-backend
        run: pnpm run test

      - name: Run backend tests with coverage
        working-directory: tms-backend
        run: pnpm run test --coverage

      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: tms-backend/coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: tms-backend/coverage/**/coverage-final.json

      - name: Cache backend pnpm store
        uses: actions/cache@v3
        with:
          path: |
            tms-backend/node_modules/.pnpm-store
            tms-backend/node_modules/.cache/pnpm
          key: ${{ runner.os }}-pnpm-${{ hashFiles('tms-backend/**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # Upload the test report as an artifact
      - name: Upload Test Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-report # Name of the artifact
          path: tms-backend/test-report.html # Path to the generated report

  deploy-report:
    name: Deploy Test Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: test # Ensure this job runs after the test job
    if: needs.test.result == 'success' # Only run this if tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Delete package-lock.json
        working-directory: tms-backend
        run: rm -f package-lock.json

      - name: Install dependencies
        working-directory: tms-backend
        run: pnpm install

      # Deploy Jest HTML Report to GitHub Pages
      - name: Deploy Jest HTML Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3 # Action to publish to GitHub Pages
        with:
          github_token: ${{ secrets.CI_TOKEN }} # GitHub token to authenticate
          publish_dir: ./tms-backend # Directory containing your Jest HTML report
          publish_branch: gh-pages # The branch where the report will be published
          clean: true
  release:
    name: Create Release
    runs-on: ubuntu-24.04
    permissions: write-all
    needs: test # Ensure `release` depends on `test`
    if: needs.test.result == 'success' # Check that `test` succeeded
    steps:
      - uses: actions/checkout@v3

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.CI_TOKEN }}

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  deploy:
    if: startsWith(github.ref, 'refs/heads/release') # Deploy only if tests pass and branch is `release/**`
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Decode and set up SSH key
        env:
          SSH_PRIVATE_KEY_BASE64: ${{ secrets.SSH_PRIVATE_KEY_BASE64 }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ls -l ~/.ssh

      - name: Deploy to EC2
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} <<EOF
            curl -fsSL https://get.pnpm.io/install.sh | sh
            export PATH=\$HOME/.local/share/pnpm:$PATH
            cd /home/ec2-user/traning-batch-1-0804/tms-backend
            rm -rf node_modules pnpm-lock.yaml
            git fetch origin
            git checkout release
            git pull
            pnpm install
            pnpm run build
            pm2 start dist/main.js || pm2 restart dist/main.js
            pm2 startup
            pm2 save
          EOF
