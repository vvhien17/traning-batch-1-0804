name: CI Back End

on:
  push:
    branches:
      - main
      - release
      - "release/**" # Add pattern for `release/` branches
  pull_request:
    branches:
      - main
      - release
      - "release/**" # Add pattern for `release/` branches

jobs:
  build:
    if: github.ref == 'refs/heads/main' # Build only on the `main` branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      # Backend
      - name: Install backend dependencies
        working-directory: tms-backend
        run: pnpm install

      - name: Ensure coverage directory exists
        working-directory: tms-backend
        run: mkdir -p ./coverage

      - name: Run backend tests
        working-directory: tms-backend
        run: pnpm run test --coverage

      - name: List coverage directory
        working-directory: tms-backend
        run: ls -R ./coverage || echo "Coverage directory does not exist."

      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: tms-backend/coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: tms-backend/coverage/**/coverage-final.json

      - name: Cache backend pnpm store
        uses: actions/cache@v3
        with:
          path: |
            tms-backend/node_modules/.pnpm-store
            tms-backend/node_modules/.cache/pnpm
          key: ${{ runner.os }}-pnpm-${{ hashFiles('tms-backend/**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

  deploy:
    if: startsWith(github.ref, 'refs/heads/release') # Deploy for branches starting with `release`
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Decode and set up SSH key
        env:
          SSH_PRIVATE_KEY_BASE64: ${{ secrets.SSH_PRIVATE_KEY_BASE64 }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ls -l ~/.ssh

      - name: Deploy to EC2
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} <<EOF
            curl -fsSL https://get.pnpm.io/install.sh | sh
            export PATH=\$HOME/.local/share/pnpm:$PATH
            cd /home/ec2-user/traning-batch-1-0804/tms-backend
            git pull origin release
            npm install
            npm run build
            pm2 start dist/main.js || pm2 restart dist/main.js
            pm2 startup
            pm2 save
          EOF
