<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="33" failures="0" errors="0" time="3.908">
  <testsuite name="GoalOnActivityService" errors="0" failures="0" skipped="0" timestamp="2024-08-23T04:51:49" time="3.196" tests="1">
    <testcase classname="GoalOnActivityService should be defined" name="GoalOnActivityService should be defined" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="AuthService" errors="0" failures="0" skipped="0" timestamp="2024-08-23T04:51:49" time="3.206" tests="3">
    <testcase classname="AuthService should be defined" name="AuthService should be defined" time="0.01">
    </testcase>
    <testcase classname="AuthService login should return a JWT token if credentials are valid" name="AuthService login should return a JWT token if credentials are valid" time="0.002">
    </testcase>
    <testcase classname="AuthService login should throw UnauthorizedException if password is incorrect" name="AuthService login should throw UnauthorizedException if password is incorrect" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="AppController" errors="0" failures="0" skipped="0" timestamp="2024-08-23T04:51:52" time="0.099" tests="1">
    <testcase classname="AppController root should return &quot;Hello World!&quot;" name="AppController root should return &quot;Hello World!&quot;" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="GoalOnActivityController" errors="0" failures="0" skipped="0" timestamp="2024-08-23T04:51:49" time="3.467" tests="1">
    <testcase classname="GoalOnActivityController should be defined" name="GoalOnActivityController should be defined" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="UserService" errors="0" failures="0" skipped="0" timestamp="2024-08-23T04:51:49" time="3.557" tests="8">
    <testcase classname="UserService should be defined" name="UserService should be defined" time="0.009">
    </testcase>
    <testcase classname="UserService create should create and return a new user" name="UserService create should create and return a new user" time="0.002">
    </testcase>
    <testcase classname="UserService create should return error if email is empty" name="UserService create should return error if email is empty" time="0.001">
    </testcase>
    <testcase classname="UserService create should return error if username is empty" name="UserService create should return error if username is empty" time="0.001">
    </testcase>
    <testcase classname="UserService create should return error if password is empty" name="UserService create should return error if password is empty" time="0.001">
    </testcase>
    <testcase classname="UserService create should return error if user with the same email already exists" name="UserService create should return error if user with the same email already exists" time="0.001">
    </testcase>
    <testcase classname="UserService getUser should return user by id" name="UserService getUser should return user by id" time="0">
    </testcase>
    <testcase classname="UserService getUser should return error if user not found" name="UserService getUser should return error if user not found" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AuthController" errors="0" failures="0" skipped="0" timestamp="2024-08-23T04:51:49" time="3.573" tests="4">
    <testcase classname="AuthController should be defined" name="AuthController should be defined" time="0.012">
    </testcase>
    <testcase classname="AuthController signIn should return a JWT token when credentials are valid" name="AuthController signIn should return a JWT token when credentials are valid" time="0.002">
    </testcase>
    <testcase classname="AuthController signIn should handle login failures" name="AuthController signIn should handle login failures" time="0.006">
    </testcase>
    <testcase classname="AuthController getProfile should return user profile if authenticated" name="AuthController getProfile should return user profile if authenticated" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CategoryService" errors="0" failures="0" skipped="0" timestamp="2024-08-23T04:51:49" time="3.613" tests="5">
    <testcase classname="CategoryService should be defined" name="CategoryService should be defined" time="0.01">
    </testcase>
    <testcase classname="CategoryService findCategoriesByUserId should return a list of categories by userId" name="CategoryService findCategoriesByUserId should return a list of categories by userId" time="0.003">
    </testcase>
    <testcase classname="CategoryService findCategoriesByUserId should return an error response if no categories are found" name="CategoryService findCategoriesByUserId should return an error response if no categories are found" time="0.002">
    </testcase>
    <testcase classname="CategoryService create should create and return a new category" name="CategoryService create should create and return a new category" time="0.001">
    </testcase>
    <testcase classname="CategoryService create should return error if user is not found" name="CategoryService create should return error if user is not found" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GoalService" errors="0" failures="0" skipped="0" timestamp="2024-08-23T04:51:49" time="3.64" tests="10">
    <testcase classname="GoalService should create a goal with valid input and return BaseResponse" name="GoalService should create a goal with valid input and return BaseResponse" time="0.008">
    </testcase>
    <testcase classname="GoalService should return an error if name is empty" name="GoalService should return an error if name is empty" time="0.001">
    </testcase>
    <testcase classname="GoalService should return an error if startedTime is invalid" name="GoalService should return an error if startedTime is invalid" time="0.002">
    </testcase>
    <testcase classname="GoalService should return an error if endedTime is invalid" name="GoalService should return an error if endedTime is invalid" time="0">
    </testcase>
    <testcase classname="GoalService should return an error if status is empty" name="GoalService should return an error if status is empty" time="0.002">
    </testcase>
    <testcase classname="GoalService should return an error if userId is invalid" name="GoalService should return an error if userId is invalid" time="0.001">
    </testcase>
    <testcase classname="GoalService should return an error if user is not found" name="GoalService should return an error if user is not found" time="0.001">
    </testcase>
    <testcase classname="GoalService should get all goals by user successfully" name="GoalService should get all goals by user successfully" time="0.001">
    </testcase>
    <testcase classname="GoalService should return with data is null if no goals are found" name="GoalService should return with data is null if no goals are found" time="0.001">
    </testcase>
    <testcase classname="GoalService should return with data is null if user not found" name="GoalService should return with data is null if user not found" time="0.001">
    </testcase>
  </testsuite>
</testsuites>